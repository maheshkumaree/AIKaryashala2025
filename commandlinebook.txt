THE COMMAND LINE BOOK - lAUNCHSCHOOL
COMMUNICATION TO COMPUTERS : GUI - GRAPHICAL USER INTERFACE.. CLICKING, SPEAKING, TAPPING ETC..
ANOTHER TYPE OF COMMUNICATION WITH COMPUTER IS TEXT BASED DONE VIA CLI
CLI - COMMAND LINE INTERFACE, COMMAND PROMPT, TERMINAL...
POWERSHELL GIT BASH ALSO PROVIDE TEXT BASED INTERAFCES
JUST LIKE GUI, USING TEXTS WHICH ARE CALLED AS COMMANDS TO OS WE CAN NAVIGATE, GUIDE, CREATE, EDIT SAVE ,
DO ETC OPERATIONS WITH FILES / DIRECTORIES/ PROGRAMS 
BASH SHELL VS zSH SHELL.. IN BASH SHELL U SEE $ AT THE PROMPT AND IN zSH U SEE % 
BASH -- 	.bsh
	 PROMPT - A WAY OF ASKING QUESTION OR GIVING COMMAND TO DO A TASK
AT THE START OF TERMINAL WE SEE A PROMPT WHICH MEANS WE CAN GIVE COMMANDS OR ASK QUESTIONS OR ENTER VALUES
THE CYCLE BWGINS WITH PROMPT - THEN USER GIVES A COMMAND OR VALUE - 
THEN OS SHOWS OUTPUT - THEN RETURN BACK PROMPT TO BE READY FOR ANOTHER ACTION

BASICALLY INTERFACE - A SYSTEM BETWEEN USER AND OS WITH TWO COMPONESTS
1) THE WAY INFORMATION IS SHOWN TO USER
2) THE WAY USER IS ABLE TO WORK WITH OS
EXAMPLE : SAY WE OPEN A WEB PAGE.. WE SEE SOMETHING AND WE DO SOMETHING
IF TAHT THINGS BEING SHOWN TO US LIKE WHAT KIND OF INFO ARE  ARE BEAUTIFUL WE SAY GOOD INTERFACE ELSE BAD
SIMILLARLY WE DO THINGS AND IF THEY ARE A LITLE DIFFICULT WE SAY BAD ui I.E USER INTERFACE

IF UI IS BAD THEN UX IS ALSO BAD BECAUSE UX MEANS USER EXPERIENCE

IF WE LOGGED IN AS ROOT SUPER ULTIMATE POWERFUL ADMIN OF ANY OS 
THEN THE PROMPT WILL BE #

SUPPOSE U OPEN A TERMINAL AND ON PROMPT IF # IS BEING DISPLAYED THEN IT MEANS U R LOGGED IN AS A ROOT ADMIN WHO HAS ALL PERMISSIONS OVER SYSTEM

C1: echo $SHELL, O/P : /USR/BIN/BASH

ECHO = SIMPLY PRINTS WHATEVER WE WRITE AFTER THE COMMAND
EX: echo "hello world" ; o/p: hello world

WHY CLI?

CAN SPEED UP DOING TASKS WITH COMPUTERCAN BE PRECISE ABOUT HOW YOU WANT YOUR COMPUTER TO PERFORM

LIKE WE SAID BEFORE INTERFACE IS NOTHING BUT WAY OF SETUP IN COMMUNICATION HAPPENS BETWEEN USER AND COMPUTER
IT IS ASYSTEM IN WHICH WE SEE HOW THE COMPUTER IS SHOWING INFO TO US AND HOW WE ARE ABLE TO TALK OR DO THINGS WITH COMPUTER.

CLI INTERFACE WE ACHIEVE THAT VIA TEXTS.. BOTH FOR COMPUTER SIDE OR OUR SIDE TRANSFER IS DONE VIA TEXTSS ONLY

CLI DISPLAY : STRUCTURE :
EX : UBUNTU@CHOPIN:~$
THIS IS CALLED AS PROMPT ITS THE START OF JOURNEY
IT CONTAINS ONE USER NAME @ HOST NAME(COMPUTER NAME) : CWD(CURRENT DIRECTORY WE ARE IN)$

TILDE ~ MEANS HOME DIRECTORY ; / MEANS ROOT DIRECTORY.. IN LINUX ROOT IS THE BEGINIG OF ALL

END OF PROMPT WE SEE CURSOR BLINKING THATS WHERE WE CAN GIVE INPUTS OR COMMANDS TO COMPUTER
STDIN AND STDOUT : BECASUSE OF THESE TWO WE CAN GIVE INPUT AND WE GET OUTPUT FROM COMPUTER

NOW WE HAVE A PROMPT(WHICH CONSISTS OF THREE ELEMENTS) + CURSOR TO GIVE COMMANDS OR VALUES / INPUT TO SYSTEM +
OUTPUT WHICH SYSTEM REPLIIES TO OUR COMMANDS. AFTER WHICH WE GET BACK TO PROMPT LINE.

C2 : pwd -- gives current directory we are in

ex : pwd : /home/ubuntu

ANATOMY OF A COMMAND:

COMMAND + [ARGUMENTS..] :

FOR EVERY COMMAND THE ARGUMENTS CAN BE MANY AND MULTIPLE AND CAN VARY DEPENDING ON THE CONTEXT

FOR EXAMPLE git commit -m : git is a command, commit is sub command -m is the flag/option , "" message is the argument

arguments are strings that we pass to programs or commands

flags - or -- are options that can change how a program or command behaves..
- short letters
-- long descriptive words
- flags can be combined

 TERMINAL SEPARATES COMMAND AND ARGUMENTS VIA SPACE.... 
 ALSO IF MULTIPLE ARGUMENTS TO DISTINGUISH THOSE TWO ARGUMENTS WE USE QUOTES AROUND EACH ARGUMENT SO 
 THAT TERMINAL UNDERSTANDS THEY ARE TWO SEPARATE ARGUMENTS SEPARATED BY SPACE AND QUOTES
 
 FLAGS BEGIN WITH - OR --
 
 C3 : tar : archival command can compress , archive, extract files.
 
 example : $ tar -c -z -f ./archive.tgz ./files-to-archive/


TAR IS COMMAND... -c -z -f are flags another specialtype of arguments

like said -c -z -f are short abbreviated flags and ./archive.tgz etc are 
string arguments being passed to command tar.

short flags can be combined together -czf 

in this example c stands for create, z - stands for zip, f stands for files.

*
man is the short for manual command it tells about flags a command uses and what they mean..

q is the command to exit manual.. i.e man


USES OF COMMAND LINE INTERFACE:

SYSTEM ADMIN I.E MANAGING SYSTEMS RESOURCES, INSTALLING, UPDATING, UPGRADING SOFTWARES,
SETTING UP SERVERS, AUTOMATING PROCESS.
SYSTEMS CAN BE PC OR SERVERS.

SOME COMMONLY USED COMMANDS :

The following is a list of some of the most common commands used on the command line.


Command 	Description
cd 	Change directory.
ls 	List files and directories in current directory.
pwd 	Display the path of the current directory.
touch 	Create a file.
mkdir 	Create a directory.
rm 	Remove a file or directory. Warning: deleting a file or directory with this command is permanent!
cp 	Copy a file or directory.
mv 	Move or rename a file or directory.
echo 	Print text to STDOUT.
cat 	Display contents of a file.
more 	Display contents of a file, starting at the top and letting the user scroll down.
less 	Display contents of a file in an even more interactive way.
head 	Display the first part of a file.
tail 	Display the last part of a file.
man 	Display documentation about a command.
 
 
 directory/folder is a container for files and other directories, helping organize the file system. 
 
 THAT MEANS DIRECTORY OR FOLDER BOTH SAME IN LINUX WE USE TERM DIRECTORY AND IN GUI WE CALL IT AS FOLDEER.
 FOLDERS CONTAINS FILES OR OTHEER FOLDERS. BUT FILE CANOT CONTAIN A FOLDER.
 
 